import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet';
import { Toaster } from './components/ui/toaster';
import { useToast } from './components/ui/use-toast';

import Header from './pages/Header';
import Dashboard from './pages/Dashboard';
import Sales from './pages/Sales';
import Accounts from './pages/Accounts';
import UploadPage from './pages/Upload';
import Integration from './pages/Integration';

// API Configuration
const API_BASE_URL = import.meta.env.VITE_API_URL || 'https://biosticker-backend-9178b2fa5a35.herokuapp.com/api';

// API Functions
const api = {
  getSales: async (status = 'all') => {
    const response = await fetch(`${API_BASE_URL}/sales?status=${status}&limit=100&t=${Date.now()}`);
    if (!response.ok) throw new Error('Failed to fetch sales data');
    return response.json();
  },
  
  getSlips: async (status = 'all') => {
    const response = await fetch(`${API_BASE_URL}/slips?status=${status}&limit=50&t=${Date.now()}`);
    if (!response.ok) throw new Error('Failed to fetch slips data');
    return response.json();
  },

  getSlipsForSale: async (saleId) => {
    const response = await fetch(`${API_BASE_URL}/slips?sale_id=${saleId}&t=${Date.now()}`);
    if (!response.ok) throw new Error('Failed to fetch slips for sale');
    return response.json();
  },
  
  getSlipsByOrder: async (orderNumber) => {
    const response = await fetch(`${API_BASE_URL}/slips?order_number=${orderNumber}&t=${Date.now()}`);
    if (!response.ok) throw new Error('Failed to fetch slips by order');
    return response.json();
  },
  
  updateSale: async (id, data) => {
    const response = await fetch(`${API_BASE_URL}/sales/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    if (!response.ok) throw new Error('Failed to update sale');
    return response.json();
  },
  
  updateSlip: async (id, data) => {
    const response = await fetch(`${API_BASE_URL}/slips/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    if (!response.ok) throw new Error('Failed to update slip');
    return response.json();
  },
  
  deleteSale: async (id) => {
    const response = await fetch(`${API_BASE_URL}/sales/${id}`, {
      method: 'DELETE'
    });
    if (!response.ok) throw new Error('Failed to delete sale');
    return response.json();
  },
  
  deleteSlip: async (id) => {
    const response = await fetch(`${API_BASE_URL}/slips/${id}`, {
      method: 'DELETE'
    });
    if (!response.ok) throw new Error('Failed to delete slip');
    return response.json();
  },
  
  addManualSale: async (data) => {
    const response = await fetch(`${API_BASE_URL}/manual-sale`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    if (!response.ok) throw new Error('Failed to add manual sale');
    return response.json();
  },
  
  getStats: async () => {
    const response = await fetch(`${API_BASE_URL}/stats`);
    if (!response.ok) throw new Error('Failed to fetch stats');
    return response.json();
  }
};

// Mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fallback (‡πÄ‡∏î‡∏¥‡∏°)
const generateMockSalesData = () => {
  const products = [
    '‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏•‡∏ô‡πå ‡∏´‡∏°‡∏µ‡∏ô‡πâ‡∏≠‡∏¢',
    '‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏•‡∏ô‡πå ‡πÅ‡∏°‡∏ß‡πÄ‡∏´‡∏°‡∏µ‡∏¢‡∏ß',
    '‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏•‡∏ô‡πå ‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏ß‡∏ô',
    'Line Theme ‡∏™‡∏µ‡∏ü‡πâ‡∏≤',
    'Line Theme ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π',
    'Line Theme Dark Mode',
    'Line Melody ‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏ó‡∏¢',
    'Line Melody ‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏≤‡∏Å‡∏•',
    'Line Melody ‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏®‡∏£‡πâ‡∏≤',
    'Line Emoji ‡πÉ‡∏´‡∏°‡πà'
  ];

  const customers = [
    '‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
    '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏™‡∏°‡∏®‡∏£‡∏µ ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°',
    '‡∏ô‡∏≤‡∏¢‡∏õ‡∏¥‡∏ï‡∏¥ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç',
    '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏°‡∏≤‡∏•‡∏µ ‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ',
    '‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å',
    '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏≠‡∏ô‡∏á‡∏Ñ‡πå ‡∏™‡∏∏‡∏Ç‡πÉ‡∏™',
    '‡∏ô‡∏≤‡∏¢‡∏ò‡∏ô‡∏≤ ‡∏£‡∏ß‡∏¢‡∏°‡∏≤‡∏Å',
    '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏£‡∏±‡∏ï‡∏ô‡∏≤ ‡πÄ‡∏û‡∏ä‡∏£‡∏á‡∏≤‡∏°',
    '‡∏ô‡∏≤‡∏¢‡∏ä‡∏±‡∏¢‡∏ß‡∏±‡∏í‡∏ô‡πå ‡∏ä‡∏ô‡∏∞‡πÄ‡∏•‡∏¥‡∏®',
    '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏™‡∏∏‡∏î‡∏≤ ‡∏´‡∏ß‡∏≤‡∏ô‡πÉ‡∏à',
    '‡∏ô‡∏≤‡∏¢‡πÄ‡∏Å‡∏£‡∏µ‡∏¢‡∏á ‡πÄ‡∏à‡πã‡∏á‡∏à‡∏£‡∏¥‡∏á',
    '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡πÅ‡∏û‡∏£‡∏ß ‡∏™‡∏î‡πÉ‡∏™',
    '‡∏ô‡∏≤‡∏¢‡∏Å‡∏¥‡∏ï‡∏ï‡∏¥ ‡∏î‡∏µ‡πÉ‡∏à',
    '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏õ‡∏£‡∏≤‡∏ì‡∏µ ‡πÄ‡∏Å‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á',
    '‡∏ô‡∏≤‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
  ];

  const sources = ['LINE Bot', 'Manual Upload', 'QR Code', 'Website'];
  const statuses = ['verified', 'pending', 'rejected'];

  const mockData = [];
  const today = new Date();

  for (let i = 0; i < 50; i++) {
    const randomDate = new Date(today);
    randomDate.setDate(today.getDate() - Math.floor(Math.random() * 30));
    
    const product = products[Math.floor(Math.random() * products.length)];
    const customer = customers[Math.floor(Math.random() * customers.length)];
    const source = sources[Math.floor(Math.random() * sources.length)];
    const status = statuses[Math.floor(Math.random() * statuses.length)];
    
    let basePrice = 50;
    if (product.includes('Theme')) basePrice = 99;
    if (product.includes('Melody')) basePrice = 69;
    if (product.includes('Emoji')) basePrice = 29;

    const quantity = Math.floor(Math.random() * 3) + 1;
    const amount = basePrice * quantity;

    mockData.push({
      id: i + 1,
      date: randomDate.toISOString().split('T')[0],
      product: product,
      amount: amount,
      quantity: quantity,
      lineName: customer,
      slipImage: '',
      source: source,
      status: status,
      paymentMethod: Math.random() > 0.5 ? '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô' : '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå',
      orderNumber: `ORD${String(1000 + i).padStart(4, '0')}`,
      phoneNumber: `08${Math.floor(Math.random() * 10)}${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,
      note: ['', '‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß', '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à', '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç'][Math.floor(Math.random() * 4)]
    });
  }

  return mockData.sort((a, b) => new Date(b.date) - new Date(a.date));
};

function App({ user, onLogout }) {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [salesData, setSalesData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isOnline, setIsOnline] = useState(true);
  const [lastDataCount, setLastDataCount] = useState(0);
  const [slipsData, setSlipsData] = useState([]);
  const { toast } = useToast();

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  const loadSalesData = async () => {
    try {
      setLoading(true);
      console.log('üîÑ Loading sales data from:', `${API_BASE_URL}/sales`);
      console.log('üîÑ Loading slips data from:', `${API_BASE_URL}/slips`);
      
      const [salesData, slipsData] = await Promise.all([
        api.getSales(),
        api.getSlips()
      ]);
      
      console.log('‚úÖ Sales data received:', salesData);
      console.log('‚úÖ Slips data received:', slipsData);
      console.log('üìä Sales length:', salesData.length);
      console.log('üìä Slips length:', slipsData.length);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      const newDataCount = salesData.length;
      const hasNewData = lastDataCount > 0 && newDataCount > lastDataCount;
      
      setSalesData(salesData);
      setSlipsData(slipsData);
      setIsOnline(true);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage ‡πÄ‡∏õ‡πá‡∏ô backup
      localStorage.setItem('biostickerSalesData', JSON.stringify(salesData));
      localStorage.setItem('biostickerSlipsData', JSON.stringify(slipsData));
      localStorage.setItem('lastDataUpdate', new Date().toISOString());
      
      // ‡πÅ‡∏™‡∏î‡∏á toast ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (hasNewData) {
        const newRecords = newDataCount - lastDataCount;
        toast({
          title: "üéâ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà!",
          description: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô ${newRecords} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏£‡∏ß‡∏° ${newDataCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`,
        });
      } else if (salesData.length > 0 || slipsData.length > 0) {
        toast({
          title: "‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          description: `‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ ${salesData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏™‡∏•‡∏µ‡∏õ ${slipsData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
        });
      } else {
        toast({
          title: "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
          description: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö",
        });
      }
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      setLastDataCount(newDataCount);
      
    } catch (error) {
      console.error('‚ùå Failed to load sales data:', error);
      setIsOnline(false);
      
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏£‡∏∑‡∏≠ mock data
      const savedData = localStorage.getItem('biostickerSalesData');
      if (savedData) {
        const parsedData = JSON.parse(savedData);
        setSalesData(parsedData);
        toast({
          title: "‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå",
          description: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ${parsedData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
          variant: "destructive"
        });
      } else {
        const mockData = generateMockSalesData();
        setSalesData(mockData);
        toast({
          title: "‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
          description: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ${mockData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
          variant: "destructive"
        });
      }
    } finally {
      setLoading(false);
    }
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  useEffect(() => {
    loadSalesData();
  }, []);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ tab ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô sales ‡∏´‡∏£‡∏∑‡∏≠ dashboard
  useEffect(() => {
    if (activeTab === 'sales' || activeTab === 'dashboard') {
      loadSalesData();
    }
  }, [activeTab]);

  // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
  // useEffect(() => {
  //   if (!isOnline) return;
  //   
  //   const interval = setInterval(() => {
  //     loadSalesData();
  //   }, 30000);
  //   
  //   return () => clearInterval(interval);
  // }, [isOnline]);

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    if (!isOnline) {
      toast({
        title: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ",
        variant: "destructive"
      });
      return;
    }

    try {
      const products = [
        '‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏•‡∏ô‡πå ‡∏´‡∏°‡∏µ‡∏ô‡πâ‡∏≠‡∏¢',
        'Line Theme ‡∏™‡∏µ‡∏ü‡πâ‡∏≤',
        'Line Melody ‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏ó‡∏¢'
      ];
      
      const customers = [
        '‡∏ô‡∏≤‡∏¢‡∏™‡∏∏‡∏£‡∏ä‡∏±‡∏¢ ‡∏°‡∏±‡πà‡∏á‡∏°‡∏µ',
        '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏à ‡∏™‡∏î‡πÉ‡∏™',
        '‡∏ô‡∏≤‡∏¢‡∏ì‡∏±‡∏ê‡∏ß‡∏∏‡∏í‡∏¥ ‡πÄ‡∏Å‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á'
      ];

      const newSaleData = {
        lineName: customers[Math.floor(Math.random() * customers.length)],
        product: products[Math.floor(Math.random() * products.length)],
        quantity: Math.floor(Math.random() * 3) + 1,
        amount: Math.floor(Math.random() * 500) + 50,
        paymentMethod: '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
        phoneNumber: `08${Math.floor(Math.random() * 10)}${Math.floor(Math.random() * 10000000).toString().padStart(7, '0')}`,
        note: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á'
      };

      const result = await api.addManualSale(newSaleData);
      
      toast({
        title: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏µ‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        description: `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${result.orderNumber}`,
      });

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await loadSalesData();
      
    } catch (error) {
      console.error('‚ùå Upload error:', error);
      toast({
        title: "‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        variant: "destructive"
      });
    }
  };

  const handleUpdateSale = async (updatedSale) => {
    if (!isOnline) {
      toast({
        title: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ",
        variant: "destructive"
      });
      return;
    }

    try {
      await api.updateSale(updatedSale.id, updatedSale);
      
      toast({ 
        title: "üéâ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", 
        description: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${updatedSale.orderNumber || `#${updatedSale.id}`} ‡∏Ç‡∏≠‡∏á ${updatedSale.lineName} ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
        duration: 4000
      });

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await loadSalesData();
      
    } catch (error) {
      console.error('‚ùå Update error:', error);
      toast({
        title: "‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        variant: "destructive"
      });
    }
  };

  const handleUpdateSlip = async (updatedSlip) => {
    if (!isOnline) {
      toast({
        title: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ",
        variant: "destructive"
      });
      return;
    }

    try {
      await api.updateSlip(updatedSlip.id, updatedSlip);
      
      toast({ 
        title: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏•‡∏µ‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
        description: `‡∏™‡∏•‡∏µ‡∏õ #${updatedSlip.id} ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß` 
      });

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await loadSalesData();
      
    } catch (error) {
      console.error('‚ùå Update slip error:', error);
      toast({
        title: "‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏•‡∏µ‡∏õ",
        variant: "destructive"
      });
    }
  };

  const handleDeleteSale = async (saleId) => {
    if (!isOnline) {
      toast({
        title: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ",
        variant: "destructive"
      });
      return;
    }

    try {
      const sale = salesData.find(s => s.id === saleId);
      await api.deleteSale(saleId);
      
      toast({ 
        title: "üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
        description: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${sale?.orderNumber || ''} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß`, 
        variant: "destructive" 
      });

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await loadSalesData();
      
    } catch (error) {
      console.error('‚ùå Delete error:', error);
      toast({
        title: "‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        variant: "destructive"
      });
    }
  };

  const handleDeleteSlip = async (slipId) => {
    if (!isOnline) {
      toast({
        title: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ",
        description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ",
        variant: "destructive"
      });
      return;
    }

    try {
      await api.deleteSlip(slipId);
      
      toast({ 
        title: "üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏•‡∏µ‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 
        description: `‡∏™‡∏•‡∏µ‡∏õ #${slipId} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß`, 
        variant: "destructive" 
      });

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await loadSalesData();
      
    } catch (error) {
      console.error('‚ùå Delete slip error:', error);
      toast({
        title: "‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏•‡∏µ‡∏õ",
        variant: "destructive"
      });
    }
  };

  const renderContent = () => {
    if (loading) {
      return (
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-emerald-500 mx-auto mb-4"></div>
            <p className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
          </div>
        </div>
      );
    }

    switch (activeTab) {
      case 'dashboard':
        return <Dashboard salesData={salesData} isOnline={isOnline} />;
      case 'sales':
        return <Sales salesData={salesData} slipsData={slipsData} onUpdateSale={handleUpdateSale} onDeleteSale={handleDeleteSale} isOnline={isOnline} />;
      case 'accounts':
        return <Accounts salesData={salesData} />;
      case 'upload':
        return <UploadPage handleFileUpload={handleFileUpload} salesData={salesData} isOnline={isOnline} />;
      case 'integration':
        return <Integration isOnline={isOnline} />;
      default:
        return <Dashboard salesData={salesData} isOnline={isOnline} />;
    }
  };

  return (
    <>
      <Helmet>
        <title>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ - BIO STICKER Line Products Sales Management</title>
        <meta name="description" content="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏™‡∏•‡∏µ‡∏õ‡πÑ‡∏•‡∏ô‡πå OA ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏Ç‡∏≤‡∏¢‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏•‡∏ô‡πå Line Theme ‡πÅ‡∏•‡∏∞ Line Melody ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥" />
      </Helmet>

      <div className="min-h-screen bg-green-50">
        <Header 
          activeTab={activeTab} 
          setActiveTab={setActiveTab} 
          isOnline={isOnline} 
          user={user}
          onLogout={onLogout}
        />
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Status Indicator */}
          {!isOnline && (
            <div className="mb-4 p-3 bg-yellow-100 border border-yellow-400 rounded-lg">
              <p className="text-yellow-800 text-sm">
                ‚ö†Ô∏è ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
              </p>
            </div>
          )}
          
          {renderContent()}
        </main>
        <Toaster />
      </div>
    </>
  );
}

export default App;