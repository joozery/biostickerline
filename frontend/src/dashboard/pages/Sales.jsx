import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Search, Download, Eye, Edit, Trash2, Upload, Bot, Calendar, User, Package, DollarSign, CheckCircle, XCircle } from 'lucide-react';
import { Button } from '../components/ui/button';
import { useToast } from '../components/ui/use-toast';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from '../components/ui/dialog';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '../components/ui/alert-dialog';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';

const SaleCard = ({ sale, onView, onEdit, onDelete, onVerify, onReject }) => (
  <div className="bg-white rounded-xl border border-gray-200 p-4 space-y-3 hover:shadow-md transition-shadow">
    <div className="flex items-start justify-between">
      <div className="flex-1 min-w-0">
        <div className="flex items-center space-x-2 mb-2">
          <div className="w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center">
            <User className="w-4 h-4 text-emerald-600" />
          </div>
          <div>
            <p className="font-medium text-gray-900 text-sm truncate">{sale.lineName}</p>
            <p className="text-xs text-gray-500">{sale.orderNumber || `#${sale.id}`}</p>
          </div>
        </div>
        
        <div className="space-y-2">
          <div className="flex items-center space-x-2">
            <Calendar className="w-4 h-4 text-gray-400" />
            <span className="text-sm text-gray-600">{new Date(sale.date).toLocaleDateString('th-TH')}</span>
          </div>
          
          <div className="flex items-center space-x-2">
            <Package className="w-4 h-4 text-gray-400" />
            <span className="text-sm text-gray-600 truncate">{sale.product}</span>
          </div>
          
          <div className="flex items-center space-x-2">
            <DollarSign className="w-4 h-4 text-emerald-500" />
            <span className="text-sm font-bold text-emerald-600">‡∏ø{sale.amount.toLocaleString()}</span>
          </div>
        </div>
      </div>
      
      <div className="flex items-center space-x-2 ml-3">
        <span className={`text-xs px-2 py-1 rounded-full ${
          sale.status === 'verified' ? 'bg-green-100 text-green-700' : 
          sale.status === 'pending' ? 'bg-yellow-100 text-yellow-700' : 'bg-red-100 text-red-700'
        }`}>
          {sale.status === 'verified' ? '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : 
           sale.status === 'pending' ? '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'}
        </span>
      </div>
    </div>
    
    <div className="flex items-center justify-between pt-2 border-t border-gray-100">
      <div className="flex items-center space-x-1">
        {sale.source === 'LINE Bot' ? (
          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
            <Bot className="w-3 h-3 mr-1" />
            LINE Bot
          </span>
        ) : (
          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
            <Upload className="w-3 h-3 mr-1" />
            Manual
          </span>
        )}
      </div>
      
      <div className="flex space-x-1">
        <Button size="sm" variant="ghost" onClick={() => onView(sale)} className="h-8 w-8 p-0">
          <Eye className="w-4 h-4" />
        </Button>
        <Button size="sm" variant="ghost" onClick={() => onEdit(sale)} className="h-8 w-8 p-0">
          <Edit className="w-4 h-4" />
        </Button>
        {sale.status === 'pending' && (
          <>
            <Button 
              size="sm" 
              variant="ghost" 
              onClick={() => onVerify(sale)}
              className="h-8 w-8 p-0 text-green-600 hover:text-green-700 hover:bg-green-50"
              title="‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"
            >
              <CheckCircle className="w-4 h-4" />
            </Button>
            <Button 
              size="sm" 
              variant="ghost" 
              onClick={() => onReject(sale)}
              className="h-8 w-8 p-0 text-red-600 hover:text-red-700 hover:bg-red-50"
              title="‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"
            >
              <XCircle className="w-4 h-4" />
            </Button>
          </>
        )}
        <AlertDialog>
          <AlertDialogTrigger asChild>
            <Button size="sm" variant="ghost" className="text-red-500 hover:text-red-700 h-8 w-8 p-0">
              <Trash2 className="w-4 h-4" />
            </Button>
          </AlertDialogTrigger>
                                  <AlertDialogContent className="bg-gradient-to-br from-red-50 to-pink-100 border-red-200">
                          <AlertDialogHeader>
                            <AlertDialogTitle>‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</AlertDialogTitle>
                            <AlertDialogDescription>‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏≤‡∏ß‡∏£</AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</AlertDialogCancel>
                            <AlertDialogAction onClick={() => onDelete(sale.id)} className="bg-destructive hover:bg-destructive/90">‡∏•‡∏ö</AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
        </AlertDialog>
      </div>
    </div>
  </div>
);

const Sales = ({ salesData, onUpdateSale, onDeleteSale, isOnline }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedProduct, setSelectedProduct] = useState('all');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [viewingSale, setViewingSale] = useState(null);
  const [editingSale, setEditingSale] = useState(null);
  const [refreshing, setRefreshing] = useState(false);
  const { toast } = useToast();

  console.log('üìä Sales component received data:', salesData);
  console.log('üî¢ Sales data length:', salesData.length);

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ORDER NUMBER ‡∏ó‡∏µ‡πà user ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≤‡∏°‡∏´‡∏≤
  const orderORD94902550 = salesData.find(sale => 
    sale.orderNumber === 'ORD94902550' || 
    sale.orderNumber === 'ORD94920407' ||
    sale.product?.includes('‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏´‡∏°‡∏µ') ||
    sale.lineName === 'Juu'
  );
  
  if (orderORD94902550) {
    console.log('üéØ Found order:', orderORD94902550);
  } else {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ORD94902550 ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    console.log('üìã ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:', salesData.map(s => s.orderNumber).filter(Boolean));
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleRefresh = async () => {
    setRefreshing(true);
    try {
      const API_BASE_URL = import.meta.env.VITE_API_URL || 'https://biosticker-backend-9178b2fa5a35.herokuapp.com/api';
      const response = await fetch(`${API_BASE_URL}/sales?status=all&limit=100&t=${Date.now()}`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const freshData = await response.json();
      console.log('üîÑ Fresh data received:', freshData);
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á parent component
      window.location.reload(); // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
      
      toast({
        title: "üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: `‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${freshData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      });
    } catch (error) {
      console.error('‚ùå Refresh error:', error);
      toast({
        title: "‚ùå ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`,
        variant: "destructive"
      });
    } finally {
      setRefreshing(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏µ‡∏ö‡∏±‡πä‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleDebug = async () => {
    try {
      const API_BASE_URL = import.meta.env.VITE_API_URL || 'https://biosticker-backend-9178b2fa5a35.herokuapp.com/api';
      const response = await fetch(`${API_BASE_URL}/debug`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const debugData = await response.json();
      console.log('üîç Debug data:', debugData);
      
      toast({
        title: "üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏µ‡∏ö‡∏±‡πä‡∏Å",
        description: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console (F12) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      });
    } catch (error) {
      console.error('‚ùå Debug error:', error);
      toast({
        title: "‚ùå ‡∏î‡∏µ‡∏ö‡∏±‡πä‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`,
        variant: "destructive"
      });
    }
  };

  const filteredSalesData = salesData.filter(sale => {
    const matchesSearch = (sale.lineName && sale.lineName.toLowerCase().includes(searchTerm.toLowerCase())) ||
                         sale.product.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (sale.orderNumber && sale.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesProduct = selectedProduct === 'all' || sale.product.includes(selectedProduct);
    const matchesStatus = selectedStatus === 'all' || sale.status === selectedStatus;
    return matchesSearch && matchesProduct && matchesStatus;
  });

  const handleExport = () => {
    if (filteredSalesData.length === 0) {
      toast({ title: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å", variant: "destructive" });
      return;
    }
    const headers = "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà,‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏≠‡∏î (Line),‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤,‡∏à‡∏≥‡∏ô‡∏ß‡∏ô,‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô,‡∏ó‡∏µ‡πà‡∏°‡∏≤,‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞,‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£,‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå\n";
    const csvContent = filteredSalesData.map(sale => {
      return `${sale.date},${sale.lineName},${sale.product},${sale.quantity},${sale.amount},${sale.source},${sale.status},${sale.phoneNumber || ''},${sale.orderNumber || ''}`;
    }).join('\n');
    const blob = new Blob([`\uFEFF${headers}${csvContent}`], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", "sales_export.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast({ title: "‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", description: "‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î" });
  };

  const handleEditSubmit = (e) => {
    e.preventDefault();
    onUpdateSale(editingSale);
    setEditingSale(null);
  };

  const handleVerify = (sale) => {
    const updatedSale = { ...sale, status: 'verified' };
    onUpdateSale(updatedSale);
    setViewingSale(null);
    toast({
      title: "‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      description: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${sale.orderNumber || `#${sale.id}`} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`,
    });
  };

  const handleReject = (sale) => {
    const updatedSale = { ...sale, status: 'rejected' };
    onUpdateSale(updatedSale);
    setViewingSale(null);
    toast({
      title: "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
      description: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${sale.orderNumber || `#${sale.id}`} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß`,
      variant: "destructive"
    });
  };

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }} 
      animate={{ opacity: 1, y: 0 }} 
      transition={{ duration: 0.5 }} 
      className="space-y-4 sm:space-y-6 px-2 sm:px-0"
    >
      {/* Search and Filter Section */}
      <div className="bg-white rounded-2xl p-4 sm:p-6 border border-emerald-100 shadow-lg">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="sm:col-span-2 lg:col-span-1">
            <Label htmlFor="search" className="text-sm font-medium">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</Label>
            <div className="relative mt-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <Input 
                id="search" 
                type="text" 
                placeholder="‡∏ä‡∏∑‡πà‡∏≠ Line, ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå..." 
                value={searchTerm} 
                onChange={(e) => setSearchTerm(e.target.value)} 
                className="pl-10 text-sm" 
              />
            </div>
          </div>
          
          <div>
            <Label htmlFor="product-filter" className="text-sm font-medium">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Label>
            <select 
              id="product-filter" 
              value={selectedProduct} 
              onChange={(e) => setSelectedProduct(e.target.value)} 
              className="w-full h-10 px-3 border border-input rounded-md text-sm mt-1"
            >
              <option value="all">‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</option>
              <option value="‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏•‡∏ô‡πå">‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏•‡∏ô‡πå</option>
              <option value="Line Theme">Line Theme</option>
              <option value="Line Melody">Line Melody</option>
              <option value="Line Emoji">Line Emoji</option>
            </select>
          </div>
          
          <div>
            <Label htmlFor="status-filter" className="text-sm font-medium">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</Label>
            <select 
              id="status-filter" 
              value={selectedStatus} 
              onChange={(e) => setSelectedStatus(e.target.value)} 
              className="w-full h-10 px-3 border border-input rounded-md text-sm mt-1"
            >
              <option value="all">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
              <option value="verified">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß</option>
              <option value="pending">‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</option>
              <option value="rejected">‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</option>
            </select>
          </div>
          
          <div className="flex items-end gap-2">
            <Button 
              onClick={handleRefresh} 
              disabled={refreshing}
              className="bg-blue-500 hover:bg-blue-600 text-white text-sm"
            >
              {refreshing ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              ) : (
                <Search className="w-4 h-4 mr-2" />
              )}
              <span className="hidden sm:inline">{refreshing ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä...' : '‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}</span>
              <span className="sm:hidden">‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</span>
            </Button>
            <Button onClick={handleExport} className="bg-emerald-500 hover:bg-emerald-600 text-white text-sm">
              <Download className="w-4 h-4 mr-2" />
              <span className="hidden sm:inline">‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
              <span className="sm:hidden">‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å</span>
            </Button>
          </div>
        </div>
        
        {/* Results Count & Debug Info */}
        <div className="mt-4 pt-4 border-t border-gray-100">
          <div className="flex justify-between items-center">
            <p className="text-sm text-gray-600">
              ‡πÅ‡∏™‡∏î‡∏á {filteredSalesData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {salesData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </p>
            <p className="text-xs text-gray-500">
              üì° {isOnline ? '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}
            </p>
          </div>
          
          {/* Debug Info when no data */}
          {salesData.length === 0 && (
            <div className="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <h4 className="text-sm font-semibold text-yellow-800 mb-2">üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡πä‡∏Å</h4>
              <div className="text-xs text-yellow-700 space-y-1">
                <p>üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {salesData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                <p>üåê ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {isOnline ? '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}</p>
                <p>üîó API: biosticker-backend-9178b2fa5a35.herokuapp.com</p>
                                 <p>üí° ‡∏•‡∏≠‡∏á‡∏Å‡∏î "‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" ‡∏´‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LINE Bot</p>
                 <div className="mt-2">
                   <Button 
                     onClick={handleDebug} 
                     size="sm" 
                     variant="outline"
                     className="text-xs border-yellow-300 text-yellow-700 hover:bg-yellow-100"
                   >
                     üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                   </Button>
                 </div>
               </div>
             </div>
           )}
          
          {/* ORD Debug Info */}
          {salesData.length > 0 && !orderORD94902550 && (
            <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <h4 className="text-sm font-semibold text-blue-800 mb-2">üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ORD94902550</h4>
              <div className="text-xs text-blue-700 space-y-1">
                <p>üìã ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:</p>
                <p className="font-mono bg-white px-2 py-1 rounded text-blue-800">
                  {salesData.map(s => s.orderNumber || `#${s.id}`).join(', ') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå'}
                </p>
                <p>üí° ‡∏´‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏•‡∏≠‡∏á‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Desktop Table View */}
      <div className="hidden lg:block bg-white rounded-2xl border border-emerald-100 shadow-lg overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-emerald-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏≠‡∏î</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏ó‡∏µ‡πà‡∏°‡∏≤</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredSalesData.map((sale) => (
                <tr key={sale.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(sale.date).toLocaleDateString('th-TH')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-gray-900">{sale.lineName}</div>
                      <div className="text-xs text-gray-500">{sale.orderNumber || `#${sale.id}`}</div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{sale.product}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-emerald-600">
                    ‡∏ø{sale.amount.toLocaleString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      sale.status === 'verified' ? 'bg-green-100 text-green-800' : 
                      sale.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {sale.status === 'verified' ? '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : 
                       sale.status === 'pending' ? '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {sale.source === 'LINE Bot' ? (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        <Bot className="w-3 h-3 mr-1.5" />
                        LINE Bot
                      </span>
                    ) : (
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        <Upload className="w-3 h-3 mr-1.5" />
                        Manual
                      </span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div className="flex space-x-1">
                      <Button size="sm" variant="ghost" onClick={() => setViewingSale(sale)}>
                        <Eye className="w-4 h-4" />
                      </Button>
                      <Button size="sm" variant="ghost" onClick={() => setEditingSale(sale)}>
                        <Edit className="w-4 h-4" />
                      </Button>
                      {sale.status === 'pending' && (
                        <>
                          <Button 
                            size="sm" 
                            variant="ghost" 
                            onClick={() => handleVerify(sale)}
                            className="text-green-600 hover:text-green-700 hover:bg-green-50"
                            title="‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"
                          >
                            <CheckCircle className="w-4 h-4" />
                          </Button>
                          <Button 
                            size="sm" 
                            variant="ghost" 
                            onClick={() => handleReject(sale)}
                            className="text-red-600 hover:text-red-700 hover:bg-red-50"
                            title="‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"
                          >
                            <XCircle className="w-4 h-4" />
                          </Button>
                        </>
                      )}
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <Button size="sm" variant="ghost" className="text-red-500 hover:text-red-700">
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </AlertDialogTrigger>
                                                  <AlertDialogContent className="bg-gradient-to-br from-red-50 to-pink-100 border-red-200">
                            <AlertDialogHeader>
                              <AlertDialogTitle>‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</AlertDialogTitle>
                              <AlertDialogDescription>
                                ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏≤‡∏ß‡∏£
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</AlertDialogCancel>
                              <AlertDialogAction onClick={() => onDeleteSale(sale.id)} className="bg-destructive hover:bg-destructive/90">
                                ‡∏•‡∏ö
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                      </AlertDialog>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Mobile/Tablet Card View */}
      <div className="lg:hidden space-y-4">
        {filteredSalesData.map((sale) => (
          <SaleCard 
            key={sale.id} 
            sale={sale} 
            onView={setViewingSale}
            onEdit={setEditingSale}
            onDelete={onDeleteSale}
            onVerify={handleVerify}
            onReject={handleReject}
          />
        ))}
        
        {filteredSalesData.length === 0 && (
          <div className="text-center py-12 bg-white rounded-2xl border border-emerald-100">
            <p className="text-gray-500 text-lg">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>
          </div>
        )}
      </div>

      {/* View Sale Dialog */}
      {viewingSale && (
        <Dialog open={!!viewingSale} onOpenChange={() => setViewingSale(null)}>
          <DialogContent className="max-w-md bg-gradient-to-br from-emerald-50 to-green-100 border-emerald-200">
            <DialogHeader>
              <DialogTitle>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢</DialogTitle>
              <DialogDescription>
                ‡∏à‡∏≤‡∏Å: {viewingSale.lineName} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {new Date(viewingSale.date).toLocaleDateString('th-TH')}
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              {viewingSale.slipImage && (
                <img src={viewingSale.slipImage} alt="‡∏™‡∏•‡∏¥‡∏õ" className="rounded-lg w-full max-h-64 object-contain" />
              )}
              <div className="space-y-2 text-sm">
                <p><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå:</strong> {viewingSale.orderNumber || `#${viewingSale.id}`}</p>
                <p><strong>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</strong> {viewingSale.product}</p>
                <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</strong> {viewingSale.quantity} ‡∏ä‡∏¥‡πâ‡∏ô</p>
                <p><strong>‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô:</strong> ‡∏ø{viewingSale.amount.toLocaleString()}</p>
                <p><strong>‡∏ó‡∏µ‡πà‡∏°‡∏≤:</strong> {viewingSale.source}</p>
                <p><strong>‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</strong> {viewingSale.paymentMethod || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                {viewingSale.phoneNumber && <p><strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</strong> {viewingSale.phoneNumber}</p>}
                {viewingSale.note && <p><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {viewingSale.note}</p>}
                <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> 
                  <span className={`ml-2 px-2 py-1 text-xs rounded-full ${
                    viewingSale.status === 'verified' ? 'bg-green-100 text-green-700' : 
                    viewingSale.status === 'pending' ? 'bg-yellow-100 text-yellow-700' : 'bg-red-100 text-red-700'
                  }`}>
                    {viewingSale.status === 'verified' ? '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : 
                     viewingSale.status === 'pending' ? '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'}
                  </span>
                </p>
              </div>
            </div>

            {/* Action Buttons for Pending Status */}
            {viewingSale.status === 'pending' && (
              <DialogFooter className="border-t pt-4">
                <div className="flex space-x-2 w-full">
                  <Button 
                    onClick={() => handleReject(viewingSale)}
                    variant="outline"
                    className="flex-1 border-red-200 text-red-600 hover:bg-red-50"
                  >
                    <XCircle className="w-4 h-4 mr-2" />
                    ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
                  </Button>
                  <Button 
                    onClick={() => handleVerify(viewingSale)}
                    className="flex-1 bg-green-500 hover:bg-green-600 text-white"
                  >
                    <CheckCircle className="w-4 h-4 mr-2" />
                    ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                  </Button>
                </div>
              </DialogFooter>
            )}

            {/* Status Info for Non-Pending */}
            {viewingSale.status !== 'pending' && (
              <DialogFooter className="border-t pt-4">
                <div className="w-full text-center">
                  <p className="text-sm text-gray-500">
                    ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ{viewingSale.status === 'verified' ? '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' : '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß'}
                  </p>
                </div>
              </DialogFooter>
            )}
          </DialogContent>
        </Dialog>
      )}

      {/* Edit Sale Dialog */}
      {editingSale && (
        <Dialog open={!!editingSale} onOpenChange={() => setEditingSale(null)}>
          <DialogContent className="max-w-md bg-gradient-to-br from-blue-50 to-indigo-100 border-blue-200">
            <DialogHeader>
              <DialogTitle>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢</DialogTitle>
            </DialogHeader>
            <form onSubmit={handleEditSubmit} className="space-y-4">
              <div>
                <Label htmlFor="edit-lineName">‡∏ä‡∏∑‡πà‡∏≠ Line</Label>
                <Input 
                  id="edit-lineName" 
                  value={editingSale.lineName} 
                  onChange={(e) => setEditingSale({ ...editingSale, lineName: e.target.value })} 
                />
              </div>
              <div>
                <Label htmlFor="edit-product">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</Label>
                <select 
                  id="edit-product" 
                  value={editingSale.product} 
                  onChange={(e) => setEditingSale({ ...editingSale, product: e.target.value })} 
                  className="w-full h-10 px-3 border border-input rounded-md"
                >
                  <option value="‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏•‡∏ô‡πå ‡∏´‡∏°‡∏µ‡∏ô‡πâ‡∏≠‡∏¢">‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏•‡∏ô‡πå ‡∏´‡∏°‡∏µ‡∏ô‡πâ‡∏≠‡∏¢</option>
                  <option value="‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏•‡∏ô‡πå ‡πÅ‡∏°‡∏ß‡πÄ‡∏´‡∏°‡∏µ‡∏¢‡∏ß">‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÑ‡∏•‡∏ô‡πå ‡πÅ‡∏°‡∏ß‡πÄ‡∏´‡∏°‡∏µ‡∏¢‡∏ß</option>
                  <option value="Line Theme ‡∏™‡∏µ‡∏ü‡πâ‡∏≤">Line Theme ‡∏™‡∏µ‡∏ü‡πâ‡∏≤</option>
                  <option value="Line Theme ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π">Line Theme ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π</option>
                  <option value="Line Melody ‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏ó‡∏¢">Line Melody ‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏ó‡∏¢</option>
                  <option value="Line Emoji ‡πÉ‡∏´‡∏°‡πà">Line Emoji ‡πÉ‡∏´‡∏°‡πà</option>
                </select>
              </div>
              <div>
                <Label htmlFor="edit-quantity">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</Label>
                <Input 
                  id="edit-quantity" 
                  type="number" 
                  value={editingSale.quantity} 
                  onChange={(e) => setEditingSale({ ...editingSale, quantity: Number(e.target.value) })} 
                />
              </div>
              <div>
                <Label htmlFor="edit-amount">‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô</Label>
                <Input 
                  id="edit-amount" 
                  type="number" 
                  value={editingSale.amount} 
                  onChange={(e) => setEditingSale({ ...editingSale, amount: Number(e.target.value) })} 
                />
              </div>
              <div>
                <Label htmlFor="edit-status">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</Label>
                <select 
                  id="edit-status" 
                  value={editingSale.status} 
                  onChange={(e) => setEditingSale({ ...editingSale, status: e.target.value })} 
                  className="w-full h-10 px-3 border border-input rounded-md"
                >
                  <option value="pending">‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</option>
                  <option value="verified">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß</option>
                  <option value="rejected">‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</option>
                </select>
              </div>
              <DialogFooter>
                <DialogClose asChild>
                  <Button type="button" variant="secondary">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Button>
                </DialogClose>
                <Button type="submit">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á</Button>
              </DialogFooter>
            </form>
          </DialogContent>
        </Dialog>
      )}
    </motion.div>
  );
};

export default Sales;